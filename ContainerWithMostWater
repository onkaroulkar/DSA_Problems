Problem Statement: https://leetcode.com/problems/container-with-most-water/description/
# Approach
1. Keep two index, first = 0 and last = n-1 and a value max_area that stores the maximum area.
2. Run a loop until first is less than the last.
3. Update the max_area with maximum of max_area and min(array[first] , array[last])*(last-first)
4. if the value at array[first] is greater the array[last] then update last as last â€“ 1 else update first as first + 1
5. Print the maximum area.

# Complexity
- Time complexity:O(n)

- Space complexity:O(1)
-
# Code
class Solution {
    public int maxArea(int[] height) {
        int res = 0;
        int l = 0;
        int r = height.length-1;
        while(l<r){
            int area = (r-l)*Math.min(height[l],height[r]);
            res = Math.max(res,area);
            if(height[l]<height[r]){
                l +=1;
            }else{
                r-=1;
            }
        }
        return res;
    }
}
```