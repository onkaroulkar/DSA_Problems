Problem Statement: https://leetcode.com/problems/maximum-product-subarray/description/
# Approach
1. Create 3 variables, currMin, currMax and maxProd initialized to the first element of the array.
2. Iterate the indices 0 to N-1 and update the variables:
        currMax = maximum(arr[i], currMax * arr[i], currMin * arr[i])
        currMin= minimum(arr[i], currMax * arr[i], currMin * arr[i])
3. update the maxProd with the maximum value for each index.
4. Return maxProd as the result.

# Complexity
- Time complexity:O(n)

- Space complexity:O(1)


# Code
```java []
class Solution {

    public static int max(int a, int b, int c){
        return Math.max(a,Math.max(b,c));
     }

    public static int min(int a, int b, int c){
        return Math.min(a,Math.min(b,c));
    }

    public int maxProduct(int[] nums) {

        int maxProd = nums[0];
        int currMin = nums[0];
        int currMax = nums[0];

        for(int i =1; i<nums.length; i++){
            int temp = max(nums[i],currMax*nums[i],currMin* nums[i]);
            currMin = min(nums[i],currMax*nums[i],currMin*nums[i]);
            currMax = temp;
            maxProd = Math.max(maxProd,currMax);
        }
            return maxProd;
    }
}