Problem Statement: https://leetcode.com/problems/search-in-rotated-sorted-array/description/
# Approach
1) Find middle point mid = (l + h)/2
2) If key is present at middle point, return mid.
3) If (arr[mid+1..h] must be sorted)
    a) If key to be searched lies in range from arr[mid+1]
       to arr[h], recur for arr[mid+1..h].
    b) Else recur for arr[l..mid]
4) If arr[l..mid] is sorted
    a) If key to be searched lies in range from arr[l]
       to arr[mid], recur for arr[l..mid].
    b) Else recur for arr[mid+1..h]

# Complexity
- Time complexity:O(n)

- Space complexity:O(1)

# Code
class Solution {
    public int search(int[] nums, int target) {
        int l = 0;
        int r = nums.length - 1;

        while(l<=r){
            int m = (l + r)/2;
            if(target == nums[m]){
                return m;
            }

            if(nums[m] >= nums[l]){
                if(target > nums[m] || target < nums[l]){
                    l = m + 1;
                }else{
                    r = m - 1;
                }
            }else{
                if(target < nums[m] || target > nums[r]){
                    r = m - 1;
                }else{
                    l = m + 1;
                }
            }
        }
        return -1;
    }
}
```